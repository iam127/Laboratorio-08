from collections import defaultdict, deque
from typing import List, Optional

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class BinaryTree:
    def __init__(self):
        self.root = None
    
    def build_tree_from_list(self, values):
        """Build a binary tree from a list of values (level order)."""
        if not values:
            return None
        
        self.root = TreeNode(values[0])
        queue = deque([self.root])
        i = 1
        
        while queue and i < len(values):
            node = queue.popleft()
            
            if i < len(values) and values[i] is not None:
                node.left = TreeNode(values[i])
                queue.append(node.left)
            i += 1
            
            if i < len(values) and values[i] is not None:
                node.right = TreeNode(values[i])
                queue.append(node.right)
            i += 1
        
        return self.root

def vertical_order_traversal(root: Optional[TreeNode]) -> List[List[int]]:
    """
    Returns a vertical order traversal of a binary tree.
    
    For each node, we assign a horizontal position: 
    - Root starts at position 0
    - Left child is at parent's position - 1
    - Right child is at parent's position + 1
    
    The function returns nodes grouped by their horizontal positions,
    ordered from leftmost to rightmost.
    """
    if not root:
        return []
    
    columns = defaultdict(list)
    
    queue = deque([(root, 0)])  
    
    min_col = max_col = 0
    
    while queue:
        node, col = queue.popleft()
        
        columns[col].append(node.val)
        
        min_col = min(min_col, col)
        max_col = max(max_col, col)
        

        if node.left:
            queue.append((node.left, col - 1))
        
        if node.right:
            queue.append((node.right, col + 1))
    

    result = []
    for col in range(min_col, max_col + 1):
        result.append(columns[col])
    
    return result

def test_vertical_order_traversal():
    """Test the vertical_order_traversal function. üìè"""

    tree1 = BinaryTree()
    tree1.build_tree_from_list([1, 2, 3, 4, 5, None, 6])
    result1 = vertical_order_traversal(tree1.root)
    expected1 = [[4], [2], [1, 5], [3], [6]]
    print(f"Test Case 1: {'PASS' if result1 == expected1 else 'FAIL'}")
    print(f"Expected: {expected1}")
    print(f"Got: {result1}\n")
    
    tree2 = BinaryTree()
    tree2.build_tree_from_list([1, 2, None, 3])
    result2 = vertical_order_traversal(tree2.root)
    expected2 = [[3], [2], [1]]
    print(f"Test Case 2: {'PASS' if result2 == expected2 else 'FAIL'}")
    print(f"Expected: {expected2}")
    print(f"Got: {result2}\n")
    
    tree3 = BinaryTree()
    result3 = vertical_order_traversal(tree3.root)
    expected3 = []
    print(f"Test Case 3: {'PASS' if result3 == expected3 else 'FAIL'}")
    print(f"Expected: {expected3}")
    print(f"Got: {result3}\n")
    
    tree4 = BinaryTree()
    tree4.build_tree_from_list([1])
    result4 = vertical_order_traversal(tree4.root)
    expected4 = [[1]]
    print(f"Test Case 4: {'PASS' if result4 == expected4 else 'FAIL'}")
    print(f"Expected: {expected4}")
    print(f"Got: {result4}\n")
    
    tree5 = BinaryTree()
    tree5.build_tree_from_list([1, 2, 3, 4, 5, 6, 7])
    result5 = vertical_order_traversal(tree5.root)
    expected5 = [[4], [2], [1, 5, 6], [3], [7]]
    print(f"Test Case 5: {'PASS' if result5 == expected5 else 'FAIL'}")
    print(f"Expected: {expected5}")
    print(f"Got: {result5}\n")

if __name__ == "__main__":
    test_vertical_order_traversal()
