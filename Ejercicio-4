from collections import defaultdict, deque

class Node:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None

class BinaryTree:
    def __init__(self):
        self.root = None

    def build_tree_from_list(self, values):
        if not values:
            return None
        self.root = Node(values[0])
        queue = deque([self.root])
        i = 1
        while i < len(values):
            current = queue.popleft()
            if values[i] is not None:
                current.left = Node(values[i])
                queue.append(current.left)
            i += 1
            if i < len(values) and values[i] is not None:
                current.right = Node(values[i])
                queue.append(current.right)
            i += 1

def vertical_order_traversal(root):
    if not root:
        return []
    
    column_table = defaultdict(list)
    queue = deque([(root, 0)]) 

    while queue:
        node, col = queue.popleft()
        column_table[col].append(node.val)
        if node.left:
            queue.append((node.left, col - 1))
        if node.right:
            queue.append((node.right, col + 1))
    
    return [column_table[x] for x in sorted(column_table)]


def test_vertical_order_traversal():
    print("Running tests... ðŸ§ª")

    tree1 = BinaryTree()
    tree1.build_tree_from_list([1, 2, 3, 4, 5, None, 6])
    assert vertical_order_traversal(tree1.root) == [[4], [2], [1, 5], [3], [6]]

    tree2 = BinaryTree()
    tree2.build_tree_from_list([1, 2, None, 3])
    assert vertical_order_traversal(tree2.root) == [[3], [2], [1]]

    tree3 = BinaryTree()
    assert vertical_order_traversal(tree3.root) == []

    tree4 = BinaryTree()
    tree4.build_tree_from_list([1])
    assert vertical_order_traversal(tree4.root) == [[1]]

    tree5 = BinaryTree()
    tree5.build_tree_from_list([1, 2, 3, 4, 5, 6, 7])
    assert vertical_order_traversal(tree5.root) == [[4], [2], [1, 5, 6], [3], [7]]

    print("All tests passed! âœ…")


test_vertical_order_traversal()
