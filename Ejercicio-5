class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None

class BinaryTree:
    def __init__(self):
        self.root = None

    def build_tree_from_list(self, values):
        if not values:
            return None
        self.root = TreeNode(values[0])
        queue = [self.root]
        i = 1
        while i < len(values):
            current = queue.pop(0)
            if current:
                if i < len(values) and values[i] is not None:
                    current.left = TreeNode(values[i])
                queue.append(current.left)
                i += 1
                if i < len(values) and values[i] is not None:
                    current.right = TreeNode(values[i])
                queue.append(current.right)
                i += 1

def prune_tree(node, target):
    if not node:
        return None
    
    node.left = prune_tree(node.left, target)
    node.right = prune_tree(node.right, target)

    if node.val != target and not node.left and not node.right:
        return None
    
    if node.val == target:

        if node.left or node.right:
            return node
        else:
            return node  

    return node
def test_prune_tree():
    tree1 = BinaryTree()
    tree1.build_tree_from_list([1, 2, 3, 4, 5, None, 6])
    pruned1 = prune_tree(tree1.root, 1)

    tree2 = BinaryTree()
    tree2.root = TreeNode(1)
    tree2.root.left = TreeNode(2)
    tree2.root.right = TreeNode(3)
    tree2.root.left.left = TreeNode(1)
    tree2.root.left.right = TreeNode(5)
    tree2.root.right.right = TreeNode(1)
    pruned2 = prune_tree(tree2.root, 1)

    tree3 = BinaryTree()
    pruned3 = prune_tree(tree3.root, 1)

    tree4 = BinaryTree()
    tree4.build_tree_from_list([1, 2, 3])
    pruned4 = prune_tree(tree4.root, 4)

    tree5 = BinaryTree()
    tree5.root = TreeNode(5)
    tree5.root.left = TreeNode(5)
    tree5.root.right = TreeNode(5)
    pruned5 = prune_tree(tree5.root, 5)

    print("All test cases ran. âœ… You can implement print_tree or visualize trees to inspect the results.")

test_prune_tree()
